from aiogram import Router, F 
from aiogram.types import Message, CallbackQuery 
from aiogram.utils.keyboard import InlineKeyboardBuilder 
from aiogram.fsm.context import FSMContext 
from aiogram.fsm.state import State, StatesGroup
from database.main import async_session 
from database.models.user import User 
from database.models.pet import Pet 
from datetime import datetime
from .pet_profile import p_profile

pets = [
    ("üê∂ –°–æ–±–∞—á–∫–∞", "dog"),
    ("üê± –ö–æ—à–µ—á–∫–∞", "cat"),
    ("üêß –ü–∏–Ω–≥–≤–∏–Ω—á–∏–∫", "penguin"),
    ("üü¢ –°–ª–∞–π–º–∏–∫", "slime"),
    ("üêµ –ë–∞–±—É–∏–Ω—á–∏–∫", "baboon"),
    ("üêº –ü–∞–Ω–¥–æ—á–∫–∞", "panda"),
    ("üêª –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "bear"),
    ("üêâ –î—Ä–∞–∫–æ–Ω—á–∏–∫", "dragon"),
    ("üçÑ –ì—Ä–∏–±–æ—á–µ–∫", "mushroom"),
    ("ü§ñ –•–æ–º—è—á–æ–∫", "hamster"),
    ("üëª –ö–æ—Ç–µ–Ω–æ–∫-–¥—É—Ö", "ghostcat"),
    ("ü´ß –ê–º—ë–±–∞", "amoeba"),
]

class CreateUserPet(StatesGroup):
    waiting_for_pet_name = State()

router = Router()

@router.message(F.text == "üê∂ –ú–æ–π –ø–∏—Ç–æ–º–µ—Ü")
async def cmd_my_pet(message: Message):

    async with async_session() as session:
        async with session.begin():
            user = await session.get(User, message.from_user.id)
            if user.user_pet_id:
                pet = await session.get(Pet, user.user_pet_id)
            else:
                pet = None
            if not pet:

                kb = InlineKeyboardBuilder()

                kb.button(text="üê∂ –ó–∞–≤–µ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞", callback_data="create_pet")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_pet")
                kb.adjust(2)

                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞. –î–∞–≤–∞–π—Ç–µ –∑–∞–≤–µ–¥–µ–º –µ–≥–æ?\n",
                    reply_markup=kb.as_markup()
                )
            
            else: 
                await p_profile(message, user, pet)
            
@router.callback_query(F.data == "create_pet")
async def create_pet(callback: CallbackQuery):
    await callback.message.delete()

    kb = InlineKeyboardBuilder()
    for name, code in pets:
        kb.button(text=name, callback_data=f"choose_{code}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_pet")
    kb.adjust(3)


    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "cancel_pet")
async def cancel_pet(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.\n"
        "–ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é."
    )

@router.callback_query(F.data.startswith("choose_"))
async def handle_choose_pet(callback: CallbackQuery, state: FSMContext):
    pet_code = callback.data.removeprefix("choose_")
    
    for pet, code in pets:
        if code == pet_code:
            await callback.message.delete()

            await state.update_data(pet_type=code, pet_w=pet)
            await state.set_state(CreateUserPet.waiting_for_pet_name)

            await callback.message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{pet}</b>, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–∞–¥–∏–º –µ–º—É –∏–º—è\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞—Ç—å", parse_mode="html"
            )
            return
        
    await callback.message.answer("–¢–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
@router.message(CreateUserPet.waiting_for_pet_name)
async def process_pet_name(message: Message, state: FSMContext):

    kb = InlineKeyboardBuilder()
    kb.button(text="üê∂ –ú–æ–π –ø–∏—Ç–æ–º–µ—Ü", callback_data="my_pet")
    kb.adjust(1)

    pet_name = message.text.strip().capitalize()

    data = await state.get_data()
    pet_type = data.get("pet_type")
    pet_w = data.get("pet_w")

    async with async_session() as session:
        async with session.begin():
            new_pet = Pet(
                owner_id=message.from_user.id,

                pet_type=pet_type, 
                pet_name=pet_name,
                pet_birthday=datetime.utcnow().date(),

                pet_hunger=100,
                pet_happiness=100,
                pet_health=100,
                pet_lvl=1,
                pet_xp=0,

            )
            session.add(new_pet)
            await session.flush()
            user = await session.get(User, message.from_user.id)
            user.user_pet_id = new_pet.pet_id

    await state.clear()

    await message.answer(
        f"–í–∞—à –Ω–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü <b>{pet_w}</b> –∏ –∑–æ–≤—É—Ç –µ–≥–æ <b>{pet_name}</b>! üéâ\n", parse_mode="html"
    )